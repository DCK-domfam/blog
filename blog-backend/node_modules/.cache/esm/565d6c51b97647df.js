let jwt,User;_b97‍.x([["default",()=>_b97‍.o]]);_b97‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_b97‍.w("../models/user",[["default",["User"],function(v){User=v}]]);//토큰 검증용 미들웨어
//app에 검증용 미들웨어를 적용하려면 router 미들웨어 적용전에 선언되어야 함
//main.js에서 router위에 선언해주면 됨



const jwtMiddleware = async (ctx, next) => {
  const token = ctx.cookies.get('access_token');
  if (!token) {
    return next(); //토큰이 없음
  }
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    //해석된결과를 미들웨어에서 사용할수 있게 하는 코드
    //decoded에서 iat(토큰 발행일시), exp(토큰 만료일시)
    ctx.state.user = {
      _id: decoded._id,
      username: decoded.username,
    };
    //토큰의 남은 유효 기간이 3.5일 미만이면 재발급
    const now = Math.floor(Date.now()/1000);
    if(decoded.exp - now < 60*60*24*3.5){
        const user = await User.findById(decoded._id);
        const token = user.generateToken();
        
        ctx.cookies.set('access_token', token, {
            maxAge: 1000*60*60*24*7,
            httpOnly: true,
        });
    }
    _b97‍.g.console.log(decoded);
    return next();
  } catch (e) {
    //토큰 검증 실패
    return next();
  }
};

_b97‍.d(jwtMiddleware);
